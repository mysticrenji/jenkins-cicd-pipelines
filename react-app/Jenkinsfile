pipeline {
  environment {
    DEPLOY = "${env.BRANCH_NAME == "main" || env.BRANCH_NAME == "develop" ? "true" : "false"}"

  }
  agent {
    kubernetes {
      label 'kubernetes'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:1.11
    command: ['cat']
    tty: true
    volumeMounts:
    - name: dockersock
      mountPath: /var/run/docker.sock
  - name: terraform
    image: ghcr.io/mysticrenji/terraform-azurecli:v6
    command: ['cat']
    tty: true
  - name: nodejs
    image: node
    command: ['cat']
    tty: true
  - name: ansible
    image: ghcr.io/mysticrenji/ansible:v7
    command: ['cat']
    tty: true
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
"""
}
  }

 stages {
   
   stage('Build') {
     steps {
       container ('nodejs') {
         sh '''
         cd react-app/azure-static
         npm install
         npm run build
            '''
         script{
                    zip zipFile: 'static-website.zip', archive: false, dir: 'react-app/azure-static/build'
                    archiveArtifacts artifacts: 'static-website.zip'
              }
       }
     }
   }
     
   stage('Terraform') {
      steps {
      container('terraform') {
        withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                         string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                         string(credentialsId: 'AWS_DEFAULT_REGION', variable: 'AWS_DEFAULT_REGION'),
                         string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'AZURE_SUBSCRIPTION_ID'),
                         string(credentialsId: 'AZURE_TENANT_ID', variable: 'AZURE_TENANT_ID'),
                         string(credentialsId: 'AZURE_CLIENT_ID', variable: 'AZURE_CLIENT_ID'),
                         string(credentialsId: 'AZURE_CLIENT_SECRET', variable: 'AZURE_CLIENT_SECRET')])
        {
        
        sh '''
         cd react-app/terraform
         terraform fmt 
           '''
        // terraform fmt -check -recursive -list=true -diff
        // tflint
        // terraform init -input=false
        // terraform plan -out=tfplan -input=false
        // terraform validate
        // terraform graph | dot -Tpng > terraform-graph.png
        // archiveArtifacts artifacts: 'terraform-graph.png'
       }
      }
   }
 }
    // stage("Publish Approval") {
    //         when { expression { DEPLOY } }
    //         steps {
    //             input message: "Deploy these changes?"
    //         }
    // }


    stage('Ansible Test'){
     steps {
       container('ansible') {
       withCredentials([ string(credentialsId: 'AZURE_SUBSCRIPTION_ID', variable: 'AZURE_SUBSCRIPTION_ID'),
                         string(credentialsId: 'AZURE_TENANT_ID', variable: 'AZURE_TENANT_ID'),
                         string(credentialsId: 'AZURE_CLIENT_ID', variable: 'AZURE_CLIENT_ID'),
                         string(credentialsId: 'AZURE_CLIENT_SECRET', variable: 'AZURE_CLIENT_SECRET')])
        {
        checkout scm
        sshagent(['ansiblev1']) {
         sh  '''
         cd react-app/ansible
         ansible --version
         ansible-playbook  azuremblob.yaml -vvv
         '''
       }   
     //      copyArtifacts filter: 'static-website.zip', fingerprintArtifacts: true, projectName: '${JOB_NAME}', selector: specific('${BUILD_NUMBER}')
    //     unzip zipFile: 'static-website.zip', dir: './Artifact'
    //ansible-playbook -i inventory nginx.yaml  --ssh-common-args='-o StrictHostKeyChecking=no'
   

       }
       }
     }
   }
   
 }
}
